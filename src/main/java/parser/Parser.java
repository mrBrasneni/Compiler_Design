/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
package parser;

public class Parser implements ParserConstants {

  static final public void Program() throws ParseException {
    trace_call("Program");
    try {

      MainClass();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CLASS:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        ClassDecl();
      }
    } finally {
      trace_return("Program");
    }
}

  static final public void MainClass() throws ParseException {
    trace_call("MainClass");
    try {

      jj_consume_token(CLASS);
      jj_consume_token(ID);
      jj_consume_token(LBRACE);
      jj_consume_token(PUBLIC);
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(LPAR);
      jj_consume_token(STRING);
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
      jj_consume_token(ID);
      jj_consume_token(RPAR);
      jj_consume_token(LBRACE);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case IF:
        case INT:
        case SOP:
        case WHILE:
        case ID:
        case LBRACE:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        Statement();
      }
      jj_consume_token(RBRACE);
      jj_consume_token(RBRACE);
    } finally {
      trace_return("MainClass");
    }
}

  static final public void ClassDecl() throws ParseException {
    trace_call("ClassDecl");
    try {

      jj_consume_token(CLASS);
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTENDS:{
        jj_consume_token(EXTENDS);
        jj_consume_token(ID);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case INT:
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        VarDecl();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLIC:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        MethodDecl();
      }
      jj_consume_token(RBRACE);
    } finally {
      trace_return("ClassDecl");
    }
}

  static final public void VarDecl() throws ParseException {
    trace_call("VarDecl");
    try {

      Type();
      jj_consume_token(ID);
      jj_consume_token(SEMICOLON);
    } finally {
      trace_return("VarDecl");
    }
}

  static final public void MethodDecl() throws ParseException {
    trace_call("MethodDecl");
    try {

      jj_consume_token(PUBLIC);
      Type();
      jj_consume_token(ID);
      jj_consume_token(LPAR);
      FormalList();
      jj_consume_token(RPAR);
      jj_consume_token(LBRACE);
      label_5:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_5;
        }
        VarDecl();
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case IF:
        case INT:
        case SOP:
        case WHILE:
        case ID:
        case LBRACE:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_6;
        }
        Statement();
      }
      jj_consume_token(RETURN);
      Exp();
      jj_consume_token(SEMICOLON);
      jj_consume_token(RBRACE);
    } finally {
      trace_return("MethodDecl");
    }
}

  static final public void FormalList() throws ParseException {
    trace_call("FormalList");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case INT:
      case ID:{
        Type();
        jj_consume_token(ID);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[6] = jj_gen;
            break label_7;
          }
          FormalRest();
        }
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    } finally {
      trace_return("FormalList");
    }
}

  static final public void FormalRest() throws ParseException {
    trace_call("FormalRest");
    try {

      jj_consume_token(COMMA);
      Type();
      jj_consume_token(ID);
    } finally {
      trace_return("FormalRest");
    }
}

  static final public void Type() throws ParseException {
    trace_call("Type");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        jj_consume_token(INT);
        break;
        }
      case BOOLEAN:{
        jj_consume_token(BOOLEAN);
        break;
        }
      case ID:{
        jj_consume_token(ID);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        TypeArray();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } finally {
      trace_return("Type");
    }
}

  static final public void TypeArray() throws ParseException {
    trace_call("TypeArray");
    try {

      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    } finally {
      trace_return("TypeArray");
    }
}

  static final public void Statement() throws ParseException {
    trace_call("Statement");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:{
        jj_consume_token(LBRACE);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BOOLEAN:
          case IF:
          case INT:
          case SOP:
          case WHILE:
          case ID:
          case LBRACE:{
            ;
            break;
            }
          default:
            jj_la1[10] = jj_gen;
            break label_8;
          }
          Statement();
        }
        jj_consume_token(RBRACE);
        break;
        }
      case IF:{
        jj_consume_token(IF);
        jj_consume_token(LPAR);
        Exp();
        jj_consume_token(RPAR);
        Statement();
        jj_consume_token(ELSE);
        Statement();
        break;
        }
      case WHILE:{
        jj_consume_token(WHILE);
        jj_consume_token(LPAR);
        Exp();
        jj_consume_token(RPAR);
        Statement();
        break;
        }
      case SOP:{
        jj_consume_token(SOP);
        jj_consume_token(LPAR);
        Exp();
        jj_consume_token(RPAR);
        jj_consume_token(SEMICOLON);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        if (jj_2_2(2)) {
          jj_consume_token(ID);
          jj_consume_token(ASSIGN);
          Exp();
          jj_consume_token(SEMICOLON);
        } else if (jj_2_3(2)) {
          jj_consume_token(ID);
          jj_consume_token(LBRACKET);
          Exp();
          jj_consume_token(RBRACKET);
          jj_consume_token(ASSIGN);
          Exp();
          jj_consume_token(SEMICOLON);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BOOLEAN:
          case INT:
          case ID:{
            VarDecl();
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("Statement");
    }
}

  static final public void Exp() throws ParseException {
    trace_call("Exp");
    try {

      ExpLogic();
    } finally {
      trace_return("Exp");
    }
}

  static final public void ExpLogic() throws ParseException {
    trace_call("ExpLogic");
    try {

      ExpRel();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OR:
        case AND:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AND:{
          jj_consume_token(AND);
          break;
          }
        case OR:{
          jj_consume_token(OR);
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        ExpRel();
      }
    } finally {
      trace_return("ExpLogic");
    }
}

  static final public void ExpRel() throws ParseException {
    trace_call("ExpRel");
    try {

      ExpAdd();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQUALS:
        case NOTEQ:
        case GT:
        case GTEQ:
        case LESS:
        case LESSEQ:{
          ;
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          break label_10;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case GT:{
          jj_consume_token(GT);
          break;
          }
        case GTEQ:{
          jj_consume_token(GTEQ);
          break;
          }
        case LESS:{
          jj_consume_token(LESS);
          break;
          }
        case LESSEQ:{
          jj_consume_token(LESSEQ);
          break;
          }
        case EQUALS:{
          jj_consume_token(EQUALS);
          break;
          }
        case NOTEQ:{
          jj_consume_token(NOTEQ);
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        ExpAdd();
      }
    } finally {
      trace_return("ExpRel");
    }
}

  static final public void ExpAdd() throws ParseException {
    trace_call("ExpAdd");
    try {

      ExpMul();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case MINUS:{
          ;
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          break label_11;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          jj_consume_token(PLUS);
          break;
          }
        case MINUS:{
          jj_consume_token(MINUS);
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        ExpMul();
      }
    } finally {
      trace_return("ExpAdd");
    }
}

  static final public void ExpMul() throws ParseException {
    trace_call("ExpMul");
    try {

      ExpUnary();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MUL:
        case DIV:{
          ;
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MUL:{
          jj_consume_token(MUL);
          break;
          }
        case DIV:{
          jj_consume_token(DIV);
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        ExpUnary();
      }
    } finally {
      trace_return("ExpMul");
    }
}

  static final public void ExpUnary() throws ParseException {
    trace_call("ExpUnary");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:
      case MINUS:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MINUS:{
          jj_consume_token(MINUS);
          break;
          }
        case NOT:{
          jj_consume_token(NOT);
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      ExpPostfix();
    } finally {
      trace_return("ExpUnary");
    }
}

  static final public void ExpPostfix() throws ParseException {
    trace_call("ExpPostfix");
    try {

      ExpFactor();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:
        case DOT:{
          ;
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          break label_13;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          jj_consume_token(LBRACKET);
          Exp();
          jj_consume_token(RBRACKET);
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          if (jj_2_4(2)) {
            jj_consume_token(DOT);
            jj_consume_token(ID);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case LPAR:{
              jj_consume_token(LPAR);
              ExpList();
              jj_consume_token(RPAR);
              break;
              }
            default:
              jj_la1[24] = jj_gen;
              ;
            }
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case DOT:{
              jj_consume_token(DOT);
              jj_consume_token(LENGTH);
              break;
              }
            default:
              jj_la1[26] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } finally {
      trace_return("ExpPostfix");
    }
}

  static final public void ExpFactor() throws ParseException {
    trace_call("ExpFactor");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:{
        jj_consume_token(INTEGER_LITERAL);
        break;
        }
      case TRUE:{
        jj_consume_token(TRUE);
        break;
        }
      case FALSE:{
        jj_consume_token(FALSE);
        break;
        }
      case ID:{
        jj_consume_token(ID);
        break;
        }
      case THIS:{
        jj_consume_token(THIS);
        break;
        }
      case LPAR:{
        jj_consume_token(LPAR);
        Exp();
        jj_consume_token(RPAR);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        if (jj_2_5(2)) {
          jj_consume_token(NEW);
          jj_consume_token(INT);
          jj_consume_token(LBRACKET);
          Exp();
          jj_consume_token(RBRACKET);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NEW:{
            jj_consume_token(NEW);
            jj_consume_token(ID);
            jj_consume_token(LPAR);
            jj_consume_token(RPAR);
            break;
            }
          default:
            jj_la1[28] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("ExpFactor");
    }
}

  static final public void ExpList() throws ParseException {
    trace_call("ExpList");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE:
      case NEW:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case ID:
      case LPAR:
      case NOT:
      case MINUS:{
        Exp();
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[29] = jj_gen;
            break label_14;
          }
          ExpRest();
        }
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        ;
      }
    } finally {
      trace_return("ExpList");
    }
}

  static final public void ExpRest() throws ParseException {
    trace_call("ExpRest");
    try {

      jj_consume_token(COMMA);
      Exp();
    } finally {
      trace_return("ExpRest");
    }
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_3R_Type_147_13_17()
 {
    if (jj_3R_TypeArray_153_5_18()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_VarDecl_119_5_15()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_TypeArray_153_5_18()
 {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_Type_145_6_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_Type_147_13_17()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_VarDecl_119_5_15()
 {
    if (jj_3R_Type_145_6_16()) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x200,0x24406100,0x800,0x20004100,0x40000,0x24406100,0x0,0x20004100,0x20004100,0x0,0x24406100,0x4402000,0x20004100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x69801000,0x20000,0x0,0x69821000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x1,0x0,0x0,0x0,0x1,0x20,0x0,0x0,0x4,0x1,0x1,0x0,0x18000,0x18000,0x3f00,0x3f00,0x60000,0x60000,0x180000,0x180000,0x44000,0x44000,0x44,0x0,0x4,0x40,0x0,0x0,0x20,0x44000,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[5];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  {
      enable_tracing();
  }
  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   trace_token(token, "");
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	   trace_token(token, " (in getNextToken)");
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[53];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 31; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 53; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  static private int trace_indent = 0;
/** Enable tracing. */
  static final public void enable_tracing() {
	 trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
	 trace_enabled = false;
  }

  static protected void trace_call(String s) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Call:	" + s);
	 }
	 trace_indent = trace_indent + 2;
  }

  static protected void trace_return(String s) {
	 trace_indent = trace_indent - 2;
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Return: " + s);
	 }
  }

  static protected void trace_token(Token t, String where) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Consumed token: <" + tokenImage[t.kind]);
	   if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t.image) + "\"");
	   }
	   System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
	 }
  }

  static protected void trace_scan(Token t1, int t2) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Visited token: <" + tokenImage[t1.kind]);
	   if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
	   }
	   System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
	 }
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 5; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
