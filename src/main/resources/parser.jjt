options {
//    DEBUG_PARSER = true;
    MULTI = true;
    NODE_DEFAULT_VOID = true;
    OUTPUT_DIRECTORY = "../parser";
    JJTREE_OUTPUT_DIRECTORY = "../java/tree";
}

PARSER_BEGIN(Parser)


package tree;
import parser.Parser;

//package parser;
//import tree.*;

public class Parser {

}
PARSER_END(Parser)

SKIP : {
    " "
|   "\t"
|   "\n"
|   "\r"
|   "\f"
|   <SINGLE_LINE_COMMENT : "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")? >
|   <MULTI_LINE_COMMENT : "/*" (~["*"] | "*" ~["/"])* "*/" >
}

/** Reserved words. */
TOKEN : {
    <BOOLEAN : "boolean">
|   <CLASS : "class">
|   <ELSE : "else">
|   <EXTENDS: "extends">
|   <FALSE: "false">
|   <IF: "if">
|   <INT: "int">
|   <LENGTH : "length">
|   <MAIN : "main">
|   <NEW: "new">
|   <PUBLIC : "public">
|   <RETURN: "return">
|   <STATIC: "static">
|   <STRING : "String">
|   <SOP : "System.out.println">
|   <THIS: "this">
|   <TRUE: "true">
|   <VOID: "void">
|   <WHILE: "while">
}

/** Literals. */
TOKEN : {
    <INTEGER_LITERAL : ["0" - "9"](["0" - "9"])*>
|   <STRING_LITERAL : "\"" (~["\"","\\","\n","\r"])* "\"">
}

/** Identifiers. */
TOKEN : {
    <ID : ["_","a" - "z","A" - "Z"](["_","a" - "z","A" - "Z","0" - "9"])*>
}

/** Separators. */
TOKEN : {
    <LPAR : "(">
|   <RPAR : ")">
|   <LBRACE : "{">
|   <RBRACE : "}">
|   <LBRACKET : "[">
|   <RBRACKET : "]">
|   <SEMICOLON : ";">
|   <COMMA : ",">
|   <DOT : ".">
}

/** Operators. */
TOKEN : {
    <ASSIGN : "=">
|   <EQUALS : "==">
|   <NOTEQ : "!=">
|   <GT : ">">
|   <GTEQ : ">=">
|   <LESS : "<">
|   <LESSEQ : "<=">
|   <NOT : "!">
|   <OR : "||">
|   <AND : "&&">
|   <PLUS : "+">
|   <MINUS : "-">
|   <MUL : "*">
|   <DIV : "/">
}


ASTProgram Program() #Program:
{}
{
    MainClass() (ClassDecl())*
    {return jjtThis;}
}

void Identifier() #Identifier:
{
    Token t;
}
{
    t=<ID>
    {
        jjtThis.setName(t.image);
    }

}

void MainClass() #MainClass:
{ }
{
    <CLASS> Identifier() <LBRACE>
        <PUBLIC> <STATIC> <VOID> <MAIN> <LPAR> <STRING> <LBRACKET> <RBRACKET>  Identifier() <RPAR> <LBRACE>
            (Statement())*
        <RBRACE>
    <RBRACE>
}

void ClassDecl() #ClassDecl:
{ }
{
    <CLASS> Identifier() (<EXTENDS> Identifier() )? #Inheritance <LBRACE>
         (((VarDecl())*) #VarDecls)
         ((MethodDecl()) * #MethodDecls)
    <RBRACE>
}

void VarDecl() #VarDecl:
{}
{
    Type() Identifier() <SEMICOLON>
}

void MethodDecl() #MethodDecl:
{}
{
    <PUBLIC> Type() Identifier() <LPAR> (FormalList() #Args) <RPAR> <LBRACE>
        (LOOKAHEAD(2) VarDecl())* (Statement())* <RETURN> Exp() <SEMICOLON>
    <RBRACE>
}

void FormalList():
{}
{
    (((Type() Identifier()) #Arg)  (FormalRest())*)?
}

void FormalRest():
{}
{
    <COMMA> ((Type() Identifier()) #Arg)
}

void Type() #Type:
{ ASTIdentifier n;}
{
     (<INT> {jjtThis.setType("int");}
|   <BOOLEAN> {jjtThis.setType("boolean");}
|   Identifier()
        {
            n = (ASTIdentifier)jjtree.popNode();
            jjtThis.setType(n.getName());
        }
    )
    (<LBRACKET> <RBRACKET>{jjtThis.setVector(true);})?
}

//void TypeArray() #TypeArray:
//{}
//{
//    <LBRACKET> <RBRACKET>
//}

void Statement():
{}
{
    <LBRACE> (Statement())* <RBRACE>
|   <IF> <LPAR> Exp() <RPAR> Statement() <ELSE> Statement()
|   <WHILE> <LPAR> Exp() <RPAR> Statement()
|   <SOP> <LPAR> Exp() <RPAR>  <SEMICOLON>
|   LOOKAHEAD(2) <ID> <ASSIGN>  Exp() <SEMICOLON>
|   LOOKAHEAD(2) <ID> <LBRACKET> Exp() <RBRACKET> <ASSIGN>  Exp() <SEMICOLON>
|   VarDecl()
}

void Exp():
{}
{
    ExpLogic()
}

void ExpLogic():
{}
{
    ExpRel() ((<AND> | <OR> ) ExpRel())*
}

void ExpRel():
{}
{
    ExpAdd() ((<GT> | <GTEQ> | <LESS> | <LESSEQ> | <EQUALS> | <NOTEQ> ) ExpAdd())*
}

void ExpAdd():
{}
{
    ExpMul() ((<PLUS> | <MINUS> ) ExpMul())*
}

void ExpMul():
{}
{
    ExpUnary() ((<MUL> | <DIV> ) ExpUnary())*
}

void ExpUnary():
{}
{
    (<MINUS> | <NOT>)?
    ExpPostfix()
}

void ExpPostfix():
{}
{
    ExpFactor() (<LBRACKET> Exp() <RBRACKET>
                | LOOKAHEAD(2) <DOT> <ID> (<LPAR> ExpList() <RPAR>)?
                | <DOT> <LENGTH> )*
}

void ExpFactor():
{}
{
    <INTEGER_LITERAL>
|   <TRUE>
|   <FALSE>
|   <ID>
|   <THIS>
|   <LPAR> Exp() <RPAR>
|   LOOKAHEAD(2) <NEW> <INT> <LBRACKET> Exp() <RBRACKET>
|   <NEW> <ID> <LPAR> <RPAR>
}

void ExpList():
{}
{
    (Exp() (ExpRest())*)?
}

void ExpRest():
{}
{
    <COMMA> Exp()
}


