/* Parser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
//package tree;
//import parser.Parser;

package parser;
import tree.*;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants, ParserConstants {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();

  static final public ASTProgram Program() throws ParseException {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MainClass();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CLASS:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        ClassDecl();
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  static final public void Identifier() throws ParseException {/*@bgen(jjtree) Identifier */
    ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void MainClass() throws ParseException {/*@bgen(jjtree) MainClass */
  ASTMainClass jjtn000 = new ASTMainClass(JJTMAINCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLASS);
      Identifier();
      jj_consume_token(LBRACE);
      jj_consume_token(PUBLIC);
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(LPAR);
      jj_consume_token(STRING);
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
      Identifier();
      jj_consume_token(RPAR);
      jj_consume_token(LBRACE);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case FALSE:
        case IF:
        case INT:
        case NEW:
        case SOP:
        case THIS:
        case TRUE:
        case WHILE:
        case INTEGER_LITERAL:
        case ID:
        case LPAR:
        case LBRACE:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        Statement();
      }
      jj_consume_token(RBRACE);
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void ClassDecl() throws ParseException {/*@bgen(jjtree) ClassDecl */
  ASTClassDecl jjtn000 = new ASTClassDecl(JJTCLASSDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLASS);
      Identifier();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTENDS:{
        jj_consume_token(EXTENDS);
ASTInheritance jjtn001 = new ASTInheritance(JJTINHERITANCE);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
        try {
          Identifier();
        } catch (Throwable jjte001) {
if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte001;}
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte001;}
                                       }
                                       {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001, true);
                                       }
        }
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case INT:
      case ID:{
ASTVarDecls jjtn002 = new ASTVarDecls(JJTVARDECLS);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
        try {
          label_3:
          while (true) {
            VarDecl();
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case BOOLEAN:
            case INT:
            case ID:{
              ;
              break;
              }
            default:
              jj_la1[3] = jj_gen;
              break label_3;
            }
          }
        } catch (Throwable jjte002) {
if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte002;}
            }
            if (jjte002 instanceof ParseException) {
              {if (true) throw (ParseException)jjte002;}
            }
            {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
        }
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUBLIC:{
ASTMethodDecls jjtn003 = new ASTMethodDecls(JJTMETHODDECLS);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
        try {
          label_4:
          while (true) {
            MethodDecl();
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case PUBLIC:{
              ;
              break;
              }
            default:
              jj_la1[5] = jj_gen;
              break label_4;
            }
          }
        } catch (Throwable jjte003) {
if (jjtc003) {
              jjtree.clearNodeScope(jjtn003);
              jjtc003 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte003 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte003;}
            }
            if (jjte003 instanceof ParseException) {
              {if (true) throw (ParseException)jjte003;}
            }
            {if (true) throw (Error)jjte003;}
        } finally {
if (jjtc003) {
              jjtree.closeNodeScope(jjtn003, true);
            }
        }
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void VarDecl() throws ParseException {/*@bgen(jjtree) VarDecl */
  ASTVarDecl jjtn000 = new ASTVarDecl(JJTVARDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      Identifier();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void MethodDecl() throws ParseException {/*@bgen(jjtree) MethodDecl */
  ASTMethodDecl jjtn000 = new ASTMethodDecl(JJTMETHODDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PUBLIC);
      Type();
      Identifier();
      jj_consume_token(LPAR);
ASTArgs jjtn001 = new ASTArgs(JJTARGS);
                                           boolean jjtc001 = true;
                                           jjtree.openNodeScope(jjtn001);
      try {
        FormalList();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                             jjtree.clearNodeScope(jjtn001);
                                             jjtc001 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte001 instanceof RuntimeException) {
                                             {if (true) throw (RuntimeException)jjte001;}
                                           }
                                           if (jjte001 instanceof ParseException) {
                                             {if (true) throw (ParseException)jjte001;}
                                           }
                                           {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                             jjtree.closeNodeScope(jjtn001, true);
                                           }
      }
      jj_consume_token(RPAR);
      jj_consume_token(LBRACE);
      label_5:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_5;
        }
        VarDecl();
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case FALSE:
        case IF:
        case INT:
        case NEW:
        case SOP:
        case THIS:
        case TRUE:
        case WHILE:
        case INTEGER_LITERAL:
        case ID:
        case LPAR:
        case LBRACE:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_6;
        }
        Statement();
      }
      jj_consume_token(RETURN);
      Exp();
      jj_consume_token(SEMICOLON);
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void FormalList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOLEAN:
    case INT:
    case ID:{
ASTArg jjtn001 = new ASTArg(JJTARG);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      try {
        Type();
        Identifier();
      } catch (Throwable jjte001) {
if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_7;
        }
        FormalRest();
      }
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
}

  static final public void FormalRest() throws ParseException {
    jj_consume_token(COMMA);
ASTArg jjtn001 = new ASTArg(JJTARG);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
    try {
      Type();
      Identifier();
    } catch (Throwable jjte001) {
if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte001;}
               }
               if (jjte001 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte001;}
               }
               {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
               }
    }
}

  static final public void Type() throws ParseException {/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ASTIdentifier n;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        jj_consume_token(INT);
jjtn000.setType("int");
        break;
        }
      case BOOLEAN:{
        jj_consume_token(BOOLEAN);
jjtn000.setType("boolean");
        break;
        }
      case ID:{
        Identifier();
n = (ASTIdentifier)jjtree.popNode();
            jjtn000.setType(n.getName());
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
jjtn000.setVector(true);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
}

//void TypeArray() #TypeArray:
//{}
//{
//    <LBRACKET> <RBRACKET>
//}
  static final public 
void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
ASTBlock jjtn001 = new ASTBlock(JJTBLOCK);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(LBRACE);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BOOLEAN:
          case FALSE:
          case IF:
          case INT:
          case NEW:
          case SOP:
          case THIS:
          case TRUE:
          case WHILE:
          case INTEGER_LITERAL:
          case ID:
          case LPAR:
          case LBRACE:{
            ;
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            break label_8;
          }
          Statement();
        }
        jj_consume_token(RBRACE);
      } catch (Throwable jjte001) {
if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
      break;
      }
    case IF:{
ASTIf jjtn002 = new ASTIf(JJTIF);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(IF);
        jj_consume_token(LPAR);
        Exp();
        jj_consume_token(RPAR);
        Statement();
        jj_consume_token(ELSE);
        Statement();
      } catch (Throwable jjte002) {
if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
      break;
      }
    case WHILE:{
ASTWhile jjtn003 = new ASTWhile(JJTWHILE);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(WHILE);
        jj_consume_token(LPAR);
        Exp();
        jj_consume_token(RPAR);
        Statement();
      } catch (Throwable jjte003) {
if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte003;}
      }
      if (jjte003 instanceof ParseException) {
        {if (true) throw (ParseException)jjte003;}
      }
      {if (true) throw (Error)jjte003;}
      } finally {
if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
      }
      break;
      }
    case SOP:{
ASTPrint jjtn004 = new ASTPrint(JJTPRINT);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(SOP);
        jj_consume_token(LPAR);
        Exp();
        jj_consume_token(RPAR);
        jj_consume_token(SEMICOLON);
      } catch (Throwable jjte004) {
if (jjtc004) {
        jjtree.clearNodeScope(jjtn004);
        jjtc004 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte004 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte004;}
      }
      if (jjte004 instanceof ParseException) {
        {if (true) throw (ParseException)jjte004;}
      }
      {if (true) throw (Error)jjte004;}
      } finally {
if (jjtc004) {
        jjtree.closeNodeScope(jjtn004, true);
      }
      }
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      if (jj_2_2(3)) {
ASTAssignment jjtn005 = new ASTAssignment(JJTASSIGNMENT);
                   boolean jjtc005 = true;
                   jjtree.openNodeScope(jjtn005);
        try {
          ExpPostfix();
          jj_consume_token(ASSIGN);
          Exp();
          jj_consume_token(SEMICOLON);
        } catch (Throwable jjte005) {
if (jjtc005) {
                     jjtree.clearNodeScope(jjtn005);
                     jjtc005 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte005 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte005;}
                   }
                   if (jjte005 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte005;}
                   }
                   {if (true) throw (Error)jjte005;}
        } finally {
if (jjtc005) {
                     jjtree.closeNodeScope(jjtn005, true);
                   }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case INT:
        case ID:{
          VarDecl();
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  static final public void Exp() throws ParseException {
    ExpOr();
}

  static final public void ExpOr() throws ParseException {
    ExpAnd();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_9;
      }
      jj_consume_token(OR);
ASTOrNode jjtn001 = new ASTOrNode(JJTORNODE);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
      try {
        ExpAnd();
      } catch (Throwable jjte001) {
if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte001;}
                       }
                       if (jjte001 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte001;}
                       }
                       {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                       }
      }
    }
}

  static final public void ExpAnd() throws ParseException {
    ExpRel();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_10;
      }
      jj_consume_token(AND);
ASTAndNode jjtn001 = new ASTAndNode(JJTANDNODE);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
      try {
        ExpRel();
      } catch (Throwable jjte001) {
if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte001;}
                        }
                        if (jjte001 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte001;}
                        }
                        {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                        }
      }
    }
}

  static final public void ExpRel() throws ParseException {Token t = null;
    ExpAdd();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUALS:
      case NOTEQ:
      case GT:
      case GTEQ:
      case LESS:
      case LESSEQ:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_11;
      }
ASTRelNode jjtn001 = new ASTRelNode(JJTRELNODE);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case GT:{
          t = jj_consume_token(GT);
          break;
          }
        case GTEQ:{
          t = jj_consume_token(GTEQ);
          break;
          }
        case LESS:{
          t = jj_consume_token(LESS);
          break;
          }
        case LESSEQ:{
          t = jj_consume_token(LESSEQ);
          break;
          }
        case EQUALS:{
          t = jj_consume_token(EQUALS);
          break;
          }
        case NOTEQ:{
          t = jj_consume_token(NOTEQ);
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
jjtn001.setName(t.image);
        ExpAdd();
      } catch (Throwable jjte001) {
if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
      }
    }
}

  static final public void ExpAdd() throws ParseException {Token t= null;
    ExpMul();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_12;
      }
ASTAddNode jjtn001 = new ASTAddNode(JJTADDNODE);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          t = jj_consume_token(PLUS);
          break;
          }
        case MINUS:{
          t = jj_consume_token(MINUS);
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
jjtn001.setName(t.image);
        ExpMul();
      } catch (Throwable jjte001) {
if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
      }
    }
}

  static final public void ExpMul() throws ParseException {Token t = null;
    ExpUnary();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:
      case DIV:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_13;
      }
ASTMulNode jjtn001 = new ASTMulNode(JJTMULNODE);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MUL:{
          t = jj_consume_token(MUL);
          break;
          }
        case DIV:{
          t = jj_consume_token(DIV);
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
jjtn001.setName(t.image);
        ExpUnary();
      } catch (Throwable jjte001) {
if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
      }
    }
}

  static final public void ExpUnary() throws ParseException {/*@bgen(jjtree) UnaryNode */
    ASTUnaryNode jjtn000 = new ASTUnaryNode(JJTUNARYNODE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:
      case MINUS:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MINUS:{
          t = jj_consume_token(MINUS);
          break;
          }
        case NOT:{
          t = jj_consume_token(NOT);
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      ExpPostfix();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
if(t != null) {
            jjtn000.setName(t.image);
        }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void ExpPostfix() throws ParseException {
    ExpFactor();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:
      case DOT:{
        ;
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        jj_consume_token(LBRACKET);
        Exp();
        jj_consume_token(RBRACKET);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        if (jj_2_3(2)) {
          jj_consume_token(DOT);
          jj_consume_token(ID);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LPAR:{
            jj_consume_token(LPAR);
            ExpList();
            jj_consume_token(RPAR);
            break;
            }
          default:
            jj_la1[26] = jj_gen;
            ;
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DOT:{
            jj_consume_token(DOT);
            jj_consume_token(LENGTH);
            break;
            }
          default:
            jj_la1[28] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
}

  static final public void ExpFactor() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      t = jj_consume_token(INTEGER_LITERAL);
ASTInteger jjtn001 = new ASTInteger(JJTINTEGER);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
                           jjtc001 = false;
jjtn001.setValue(t.image);
      } finally {
if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                           }
      }
      break;
      }
    case TRUE:{
ASTTrue jjtn002 = new ASTTrue(JJTTRUE);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(TRUE);
      } finally {
if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
      break;
      }
    case FALSE:{
ASTFalse jjtn003 = new ASTFalse(JJTFALSE);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(FALSE);
      } finally {
if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
      }
      break;
      }
    case ID:{
      Identifier();
      break;
      }
    case THIS:{
ASTThis jjtn004 = new ASTThis(JJTTHIS);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(THIS);
      } finally {
if (jjtc004) {
        jjtree.closeNodeScope(jjtn004, true);
      }
      }
      break;
      }
    case LPAR:{
      jj_consume_token(LPAR);
      Exp();
      jj_consume_token(RPAR);
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      if (jj_2_4(2)) {
        jj_consume_token(NEW);
        jj_consume_token(INT);
        jj_consume_token(LBRACKET);
        Exp();
        jj_consume_token(RBRACKET);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:{
          jj_consume_token(NEW);
          Identifier();
          jj_consume_token(LPAR);
          jj_consume_token(RPAR);
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  static final public void ExpList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FALSE:
    case NEW:
    case THIS:
    case TRUE:
    case INTEGER_LITERAL:
    case ID:
    case LPAR:
    case NOT:
    case MINUS:{
      Exp();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[31] = jj_gen;
          break label_15;
        }
        ExpRest();
      }
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      ;
    }
}

  static final public void ExpRest() throws ParseException {
    jj_consume_token(COMMA);
    Exp();
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_3R_ExpFactor_272_5_34()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_Identifier_111_5_20()) return true;
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_ExpPostfix_257_19_36()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3R_Type_174_6_27()
 {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_ExpFactor_270_5_32()
 {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3R_ExpFactor_270_5_33()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_Exp_197_5_18()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3R_ExpPostfix_255_18_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpPostfix_255_18_35()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpPostfix_257_19_36()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_ExpFactor_268_5_30()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_ExpFactor_268_5_31()
 {
    if (jj_3R_Identifier_111_5_20()) return true;
    return false;
  }

  static private boolean jj_3R_ExpPostfix_255_18_35()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Exp_197_5_18()) return true;
    return false;
  }

  static private boolean jj_3R_ExpFactor_267_5_29()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_ExpFactor_265_5_28()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_ExpFactor_265_5_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpFactor_265_5_28()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpFactor_267_5_29()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpFactor_268_5_30()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpFactor_268_5_31()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpFactor_270_5_32()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpFactor_270_5_33()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpFactor_272_5_34()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_Type_168_5_26()
 {
    if (jj_3R_Identifier_111_5_20()) return true;
    return false;
  }

  static private boolean jj_3R_Type_166_7_24()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_Type_167_5_25()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_Type_166_6_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Type_166_7_24()) {
    jj_scanpos = xsp;
    if (jj_3R_Type_167_5_25()) {
    jj_scanpos = xsp;
    if (jj_3R_Type_168_5_26()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_Type_174_6_27()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_ExpPostfix_255_5_17()
 {
    if (jj_3R_ExpFactor_265_5_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExpPostfix_255_18_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_ExpMul_235_17_47()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_VarDecl_140_5_16()) return true;
    return false;
  }

  static private boolean jj_3R_ExpUnary_243_6_45()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) return true;
    }
    return false;
  }

  static private boolean jj_3R_ExpUnary_243_5_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpUnary_243_6_45()) jj_scanpos = xsp;
    if (jj_3R_ExpPostfix_255_5_17()) return true;
    return false;
  }

  static private boolean jj_3R_ExpAdd_227_15_46()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    return false;
  }

  static private boolean jj_3R_VarDecl_140_5_16()
 {
    if (jj_3R_Type_166_6_19()) return true;
    if (jj_3R_Identifier_111_5_20()) return true;
    return false;
  }

  static private boolean jj_3R_ExpMul_234_5_41()
 {
    if (jj_3R_ExpUnary_243_5_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExpMul_235_17_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_ExpRel_218_15_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_ExpAdd_226_5_39()
 {
    if (jj_3R_ExpMul_234_5_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExpAdd_227_15_46()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_ExpAnd_209_16_42()
 {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static private boolean jj_3R_ExpRel_217_5_38()
 {
    if (jj_3R_ExpAdd_226_5_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExpRel_218_15_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_ExpOr_203_16_40()
 {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  static private boolean jj_3R_ExpAnd_209_5_37()
 {
    if (jj_3R_ExpRel_217_5_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExpAnd_209_16_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_Identifier_111_5_20()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_ExpOr_203_5_23()
 {
    if (jj_3R_ExpAnd_209_5_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExpOr_203_16_40()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_Exp_197_5_18()
 {
    if (jj_3R_ExpOr_203_5_23()) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_ExpPostfix_255_5_17()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_Exp_197_5_18()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[33];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x200,0x6dc27100,0x800,0x20004100,0x20004100,0x40000,0x40000,0x6dc27100,0x0,0x20004100,0x20004100,0x0,0x6dc27100,0x4402000,0x20004100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x69801000,0x20000,0x0,0x69821000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x20,0x0,0x0,0x4,0x1,0x1,0x0,0x8000,0x10000,0x3f00,0x3f00,0x60000,0x60000,0x180000,0x180000,0x44000,0x44000,0x44,0x0,0x4,0x40,0x0,0x0,0x20,0x44000,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[4];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 33; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 33; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 33; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 33; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 33; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 33; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[53];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 33; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 53; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 4; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
